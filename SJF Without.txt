import java.util.Scanner;

public class SJFWithoutArrivalTime {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the number of processes: ");
        int n = sc.nextInt();

        int[] burstTime = new int[n];
        int[] waitingTime = new int[n];
        int[] turnaroundTime = new int[n];

        System.out.println("Enter burst times for each process:");
        for (int i = 0; i < n; i++) {
            burstTime[i] = sc.nextInt();
        }

        // Sort processes based on burst time (non-preemptive SJF)
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (burstTime[j] > burstTime[j + 1]) {
                    // Swap burst times
                    int tempBurst = burstTime[j];
                    burstTime[j] = burstTime[j + 1];
                    burstTime[j + 1] = tempBurst;
                }
            }
        }

        // Calculate waiting time and turnaround time
        int totalWaitingTime = 0;
        for (int i = 0; i < n; i++) {
            totalWaitingTime += burstTime[i];
            waitingTime[i] = totalWaitingTime - burstTime[i];
            turnaroundTime[i] = totalWaitingTime;
        }

        // Display results
        System.out.println("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time");
        for (int i = 0; i < n; i++) {
            System.out.println("P" + i + "\t" + burstTime[i] + "\t\t" + waitingTime[i] + "\t\t" + turnaroundTime[i]);
        }

        sc.close();
    }
}